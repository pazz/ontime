grammar;

use crate::temporal_graphs::TemporalGraph;
use crate::parser::{ParsedLine, NodeAttr, temporal_graph_from_lines};

use crate::formulae::Formula;
use crate::parser::formula::FormulaParser;


// declare precedences for the lexer
match {
    // skip whitespaces
    r"\s*" => { },                  


    // C-style comments
    r"//[^\n\r]*[\n\r]*" => { }, // Skip `// comments`
    r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => { },  // Skip `/* comments */`

    // anything else
    r#"[A-Za-z]+[A-Za-z0-9_]*"# => id_token,
    r"-?[0-9]+" => int_token,
    r#""([^"\\]|\\.)*""# => string_token,
    r#"\(.*\)"# => formula_token,
    _
}


// Node ID: nonempty string starting with a letter
ID: String = {
    id_token => <>.to_string()
};

QuotedString: String = {
    string_token => String::from(&<>[1..<>.len()-1]),
};

INT: i64 = <s:int_token> => s.parse::<i64>().unwrap();

FORMULA: Formula = {
    <f:formula_token> => FormulaParser::new().parse(f).unwrap(),
}

// Node attributes, e.g. "owner(0)"
NodeAttr: NodeAttr = {
    "label" "[" <l:QuotedString> "]" => NodeAttr::Label(l),
    "owner" "[" <i:INT> "]" => NodeAttr::Owner(i%2==0),
};



// Helper: a comma-separated list of Ts
Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

// Lists of node and edge attributes
NodeAttrList = Comma<NodeAttr>;

// List of Node IDs
pub NIDList = Comma<ID>;


pub Line: ParsedLine = {
    "node" <id:ID> ":" <attrs:NodeAttrList> => ParsedLine::Node(id, attrs),
    "node" <id:ID> => ParsedLine::Node(id, vec![]),
    "edge" <from:ID> "->" <to:ID> => ParsedLine::Edge(from, to, None),
    "edge" <from:ID> "->" <to:ID> ":" <f:FORMULA> => ParsedLine::Edge(from, to, Some(f)),
};


// The main parser for tg-files.
//The logic is moved into a helper method that takes parsed lines
// and turns it into a TemporalGraph.
pub TemporalGraph: TemporalGraph = {
    <l:Line*> => temporal_graph_from_lines(l),
};
