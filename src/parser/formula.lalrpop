use crate::formulae::Expr;
use crate::formulae::Formula;

grammar;

// declare precedences for the lexer
match {
    r"\s*" => { }, // The default whitespace skipping is disabled if an `ignore pattern` is specified
    r"//[^\n\r]*[\n\r]*" => { }, // Skip `// comments`
    r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => { },  // Skip `/* comments */`
    _
}

pub Formula: Formula = {
    "(" "forall" <v:VAR> <f:Formula> ")" => Formula::Forall(v, Box::new(f)),
    "(" "exists" <v:VAR> <f:Formula> ")" => Formula::Exists(v, Box::new(f)),
    "(" "and" <fs:(Formula)+> ")" => Formula::And(fs),
    "(" "or" <fs:(Formula)+> ")" => Formula::Or(fs),
    "(" "not" <f:Formula> ")" => Formula::Not(Box::new(f)),
    "(" "=" <e1:Expr> <e2:Expr> ")" => Formula::Eq(Box::new(e1), Box::new(e2)),
    "(" "!=" <e1:Expr> <e2:Expr> ")" => Formula::Neq(Box::new(e1), Box::new(e2)),
    "(" "<" <e1:Expr> <e2:Expr> ")" => Formula::Lt(Box::new(e1), Box::new(e2)),
    "(" "<=" <e1:Expr> <e2:Expr> ")" => Formula::Le(Box::new(e1), Box::new(e2)),
    "(" ">" <e1:Expr> <e2:Expr> ")" => Formula::Gt(Box::new(e1), Box::new(e2)),
    "(" ">=" <e1:Expr> <e2:Expr> ")" => Formula::Ge(Box::new(e1), Box::new(e2)),

    // list of commas
    "(" <list:Comma<INT>> ")" 
    => Formula::Or(
        list.iter()
        .map(|t| Formula::Eq(Box::new(Expr::Var("t".to_string())), Box::new(Expr::Const(*t))))
        .collect()
        )
};

Expr: Expr = {
    "(" "+" <e1:Expr> <e2:Expr> ")" => Expr::Add(Box::new(e1), Box::new(e2)),
    "(" "-" <e1:Expr> <e2:Expr> ")" => Expr::Sub(Box::new(e1), Box::new(e2)),
    "(" "*" <n:INT> <e:Expr> ")" => Expr::MulConst(n, Box::new(e)),
    "(" "mod" <e:Expr> <n:INT> ")" => Expr::Mod(Box::new(e), n),
    <v:VAR> => Expr::Var(v),
    <n:INT> => Expr::Const(n),
};

VAR: String = <s:r"[A-Za-z]+"> => s.to_string();
INT: i64 = <s:r"[0-9]+"> => s.parse::<i64>().unwrap();

// Helper: a comma-separated list of Ts
Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

